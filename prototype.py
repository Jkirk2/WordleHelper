# -*- coding: utf-8 -*-
"""Prototype

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j2B7LGJJtfE3_Epe3Xjs9DhHl7ITy0XC
"""

"""
Wordle Solver created by James Kirk
https://github.com/Jkirk2

"""


#imports and global vars
import pandas as pd
wordList = []
#opening the file
file = open("wordle.txt","r")
words = file.readlines()
TOTAL_WORDS = len(words)

#strips the word file list of all non alpha numeric and assignes it to a list
def generateWords():
    fiveLetters = []

    for i in words:
        fiveLetters.append(i.strip())

    return fiveLetters

#finds frequency of letters in the dataset, returns a dataframe with each
#letter with percents of frequency of each letter
def findScores():
    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 
               'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 
               's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
    scores = []
    for i in range(5):
      frequency = []
      
      for i in letters:
          frequency.append(0)
      scores.append(dict(zip(letters, frequency)))

    for i in range(5):
        for word in wordList:
          scores[i][word[i]] +=1
        for j in scores[i]:
          #turns it into a percent
          scores[i][j] = scores[i][j]/len(wordList)
    
    df = pd.DataFrame({
    'letters': letters,
    'letter1': list(scores[0].values()),
    'letter2': list(scores[1].values()),
    'letter3': list(scores[2].values()),
    'letter4': list(scores[3].values()),
    'letter5': list(scores[4].values())
})

    return df.set_index('letters')



#finds the higest scoring words based on frequency, returns the average percent
#frequency and adds a penalty to words with duplicate letters
#scores are divided by number of duplicates
#times the duplicate penalty returns a sorted dictionary of the best scoring
#words, words with no duplicates are not touched

def getWordScores(frequencyData,duplicatePenalty):
    scoredf = frequencyData
    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 
               'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 
               's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
    #gets the base score from the list of words
    scores = []
    for word in wordList:
        score = 0
        pos = 1
        for letter in word:
            index = 0
            while letter != letters[index]:
                index +=1
            score += scoredf['letter'+str(pos)][index]
            pos+=1
        scores.append(score/len(word))
        
    #penalises duplicates
    index = 0
    for word in wordList:
        dups = 0

        for i in range(5):
            for j in range(5):
                if i != j:
                    if word[i] == word[j]:
                        dups +=1
        if dups != 0:
          
          reduction = (dups*duplicatePenalty)
          scores[index] = scores[index] / reduction
        index +=1
    wordScores = dict(zip(wordList, scores))
    wordScores = sorted(wordScores.items(), key=lambda x: x[1], reverse=True)
    return wordScores



#returns a list of output for automatic training
def returnColors(word, answer):
    colors = [0,0,0,0,0]
    for i in range(5):
        if word[i] == answer[i]:
            colors[i] = 2
    for i in range(5):
        color = 0
        for j in range(5):
            if word[i] == answer[j]:
                color = 2
        if colors[i] != 2:
            colors[i] = color
    return colors

#eliminates words from word list that are not possible
#guess is the word guessed, color is its colors, wordsLeft is the
#list of all un eliminated words, returns a list of words
def pruneList(guess, colors):
  toRemove = []
  for word in wordList:
    remove = False
    #eliminates greens on the same letter and yellows on the same letter
    for i in range(5):
      #removes green letters that are not the same position
      if(colors[i] == 2):
        if word[i] != guess[i]:
          
          remove = True
          break
      #removes yellow letters that are the same position (yellows must be different)
      if(colors[i] == 1):
        if(word[i] == guess[i]):
          remove = True
          break
          
          

    #removes word based on black letters
    if remove == False:
      
      for i in range(5):
        if(colors[i] == 0):
          for j in range(5):
            #if the black letter exists in the word delete it
           
            if(word[j] == guess[i]):
              
              remove = True
              break

            
    
    if remove == False:
      yellows = []
      for i in range(5):
        if colors[i] == 1:
          yellows.append(guess[i])
      #finds words containing yellow letters (accoutns for duplicates)
      #same letter yellows already removed
      if(len(yellows )> 0):
          yellowLetters = []
          for letter in yellows:
            yellowLetters.append(letter)
          #has a list of yellow letters, removes a letter from the yellow letter
          #list if it matches, if all are removed the letter is valid
          #takes care of duplicates due to wordle rules (1 yellow 1 black on dups
          #mean it has one of the letter, 2 yellow on dups mean it has 2)
          for i in word:
            for j in yellowLetters:
              if i == j:
                yellowLetters.remove(i)
          if(len(yellowLetters) != 0):
            remove = True
    if remove == True:
      toRemove.append(word)
  for i in toRemove:
    wordList.remove(i)

turn = 1
topWords = 25
wordList = generateWords()
colors = []
won = False
while(won == False or turn > 6):
  frequencies = findScores()
  best = getWordScores(frequencies,1)
  
  if(len(wordList) >= topWords):
    print("here are the top",topWords,"words based on frequency")
    for i in range(topWords):
      if i % 3 == 0:
          print("")
      percent = best[i][1]
      percent = percent * 100
      percent = round(percent,2)
      
      print("["+str(i)+"]:"+ best[i][0]+ " | score:" + str(percent) + "%",end="     ")
    guess = input("Round:"+str(turn)+": what word did you use")
  else:
    print("best of the",len(wordList),"words left based on frequency")
    for i in range(len(wordList)):
      if i % 3 == 0:
          print("")
      percent = best[i][1]
      percent = percent * 100
      percent = round(percent,2)
      
      print("["+str(i)+"]:"+ best[i][0]+ " | score:" + str(percent) + "%",end="     ")
    guess = input("Round:"+str(turn)+": what word did you use")



  for i in guess:
      print("use 0 for black | 1 for yellow | 2 for green ")
      color = int(input("what color is the letter "+i+"[0,1,2]:"))
      colors.append(color)
  before = len(wordList)
  print(guess,colors)
  pruneList(guess,colors)
  print(before - len(wordList), "words eliminated", len(wordList),"words remain")
  colors = []
  if(len(wordList) == 1):
    won = True
  turn +=1

if(turn-1 > 6):
  print("Too bad! though it is unlikely to lose, it may still be possible due to nature of statistics!")
else:
  print("You got it in",turn-1,"tries!")

